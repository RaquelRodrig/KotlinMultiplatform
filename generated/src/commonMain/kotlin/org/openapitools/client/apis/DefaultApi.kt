/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.Category
import org.openapitools.client.models.Error
import org.openapitools.client.models.Product

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class DefaultApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Retrieve categories
     * 
     * @return kotlin.collections.List<Category>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun categoriesGet(): HttpResponse<kotlin.collections.List<Category>> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/categories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<CategoriesGetResponse>().map { value }
    }

    @Serializable(CategoriesGetResponse.Companion::class)
    private class CategoriesGetResponse(val value: List<Category>) {
        companion object : KSerializer<CategoriesGetResponse> {
            private val serializer: KSerializer<List<Category>> = serializer<List<Category>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: CategoriesGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = CategoriesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve products
     * 
     * @return kotlin.collections.List<Product>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun productsGet(): HttpResponse<kotlin.collections.List<Product>> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/products",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ProductsGetResponse>().map { value }
    }

    @Serializable(ProductsGetResponse.Companion::class)
    private class ProductsGetResponse(val value: List<Product>) {
        companion object : KSerializer<ProductsGetResponse> {
            private val serializer: KSerializer<List<Product>> = serializer<List<Product>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ProductsGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ProductsGetResponse(serializer.deserialize(decoder))
        }
    }

}
